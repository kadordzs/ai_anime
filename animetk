<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>محاكاة الحياة في عوالم الأنمي</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide-react@0.378.0/dist/umd/lucide.min.js"></script>

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Almarai:wght@300;400;700;800&family=Cinzel:wght@400;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Almarai', sans-serif;
            background-color: #111827; /* bg-gray-900 */
            color: #d1d5db; /* text-gray-300 */
        }
        .cinzel {
            font-family: 'Cinzel', serif;
        }
        .card-bg {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card-bg:hover {
            transform: scale(1.05);
            box-shadow: 0 0 25px rgba(255, 255, 255, 0.3);
        }
        .glass-bg {
            background: rgba(17, 24, 39, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #1f2937; /* bg-gray-800 */
        }
        ::-webkit-scrollbar-thumb {
            background: #4b5563; /* bg-gray-600 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280; /* bg-gray-500 */
        }
        .btn-primary {
            @apply bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-500 transition-colors duration-300 shadow-lg shadow-indigo-600/30;
        }
        .modal {
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        }
    </style>
</head>
<body class="antialiased">

    <div id="app-container">
        <!-- ======================================================= -->
        <!--                  PAGE 1: WORLD SELECTION                -->
        <!-- ======================================================= -->
        <section id="page-world-selection" class="min-h-screen flex flex-col items-center justify-center p-6 text-center" dir="ltr">
            <h1 class="text-5xl md:text-7xl font-bold cinzel text-white mb-4">Choose Your World</h1>
            <p class="text-2xl md:text-3xl text-indigo-300 mb-12 cinzel">And Forge Your Destiny</p>
            
            <!-- Loading Indicator -->
            <div id="worlds-loading" class="text-center">
                <svg class="w-12 h-12 text-gray-400 animate-spin mx-auto" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0492C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5424 39.6781 93.9676 39.0409Z" fill="#6366f1"/></svg>
                <p class="mt-4 text-lg text-gray-400">Loading Worlds...</p>
            </div>
            
            <div id="world-list" class="hidden grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 w-full max-w-screen-xl">
                <!-- World cards will be dynamically inserted here -->
            </div>
        </section>

        <!-- ======================================================= -->
        <!--               PAGE 2: CHARACTER CREATION              -->
        <!-- ======================================================= -->
        <section id="page-character-creation" class="hidden min-h-screen flex items-center justify-center p-6">
            <div class="glass-bg rounded-2xl p-8 w-full max-w-4xl shadow-2xl">
                <h2 id="creation-title" class="text-3xl font-bold text-center text-white mb-6 cinzel">صناعة الشخصية: عالم ...</h2>
                <div id="character-form-step-1">
                    <h3 class="text-xl font-bold text-indigo-300 mb-4">1. المعلومات الأساسية</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <input type="text" id="char-name" placeholder="اسم الشخصية" class="bg-gray-800 border border-gray-700 rounded-lg p-3 focus:ring-2 focus:ring-indigo-500 focus:outline-none">
                        <select id="char-gender" class="bg-gray-800 border border-gray-700 rounded-lg p-3 focus:ring-2 focus:ring-indigo-500 focus:outline-none">
                            <option value="ذكر">ذكر</option>
                            <option value="أنثى">أنثى</option>
                        </select>
                        <input type="number" id="char-age" placeholder="العمر" class="bg-gray-800 border border-gray-700 rounded-lg p-3 focus:ring-2 focus:ring-indigo-500 focus:outline-none md:col-span-2">
                    </div>
                     <button onclick="app.nextStep(2)" class="btn-primary mt-6 w-full">التالي</button>
                </div>
                <div id="character-form-step-2" class="hidden">
                    <h3 class="text-xl font-bold text-indigo-300 mb-4">2. نقطة البداية</h3>
                    <input type="text" id="char-timeline" placeholder="في أي فترة زمنية أو آرك ستبدأ؟ (مثال: بعد امتحان التشونين)" class="bg-gray-800 border border-gray-700 rounded-lg p-3 w-full mb-4 focus:ring-2 focus:ring-indigo-500 focus:outline-none">
                    <input type="text" id="char-location" placeholder="أين ستبدأ؟ (مثال: قرية كونوها)" class="bg-gray-800 border border-gray-700 rounded-lg p-3 w-full mb-4 focus:ring-2 focus:ring-indigo-500 focus:outline-none">
                    <button onclick="app.nextStep(3)" class="btn-primary mt-6 w-full">التالي</button>
                </div>
                 <div id="character-form-step-3" class="hidden">
                    <h3 class="text-xl font-bold text-indigo-300 mb-4">3. المظهر</h3>
                    <textarea id="char-appearance" rows="4" placeholder="صف مظهر شخصيتك بالتفصيل، أو اضغط على 'توليد عشوائي' ليقوم الذكاء الاصطناعي بوصفها..." class="bg-gray-800 border border-gray-700 rounded-lg p-3 w-full focus:ring-2 focus:ring-indigo-500 focus:outline-none"></textarea>
                    <button id="generate-appearance-btn" class="bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-500 transition-colors duration-300 mt-2 w-full">توليد وصف عشوائي</button>
                    <button onclick="app.startSimulation()" class="btn-primary mt-6 w-full">ابدأ المحاكاة</button>
                </div>
            </div>
        </section>

        <!-- ======================================================= -->
        <!--                  PAGE 3: SIMULATION                     -->
        <!-- ======================================================= -->
        <section id="page-simulation" class="hidden h-screen w-screen p-2 sm:p-4 lg:p-6">
            <div class="grid grid-cols-12 gap-4 h-full">

                <!-- Left Sidebar: Character Sheet -->
                <div id="sidebar-left" class="col-span-12 lg:col-span-3 h-full glass-bg rounded-2xl p-4 overflow-y-auto">
                    <h2 class="text-2xl font-bold cinzel text-white text-center mb-4">ملف الشخصية</h2>
                    <div class="text-center mb-4">
                        <img id="char-sheet-avatar" src="https://placehold.co/150x150/1f2937/d1d5db?text=Avatar" class="w-32 h-32 rounded-full mx-auto border-2 border-indigo-400 object-cover shadow-lg">
                        <h3 id="char-sheet-name" class="text-xl font-bold mt-3 text-white"></h3>
                        <p id="char-sheet-age-status" class="text-sm text-gray-400"></p>
                        <p id="char-sheet-rank" class="mt-1 text-indigo-300 font-bold"></p>
                    </div>

                    <div class="space-y-4">
                        <details class="bg-gray-900/50 rounded-lg p-3" open>
                            <summary class="font-bold text-lg text-white cursor-pointer">المظهر</summary>
                            <p id="char-sheet-appearance" class="text-gray-400 mt-2 text-sm"></p>
                        </details>
                        <details class="bg-gray-900/50 rounded-lg p-3" open>
                            <summary class="font-bold text-lg text-white cursor-pointer">الحالة</summary>
                            <div class="mt-2 space-y-2">
                               <div>
                                 <label id="char-sheet-energy-label" class="text-sm font-bold text-indigo-300">طاقة</label>
                                 <div class="w-full bg-gray-700 rounded-full h-2.5"><div id="char-sheet-energy-bar" class="bg-indigo-500 h-2.5 rounded-full" style="width: 100%"></div></div>
                               </div>
                               <div>
                                 <p class="text-sm font-bold">الصحة: <span id="char-sheet-health" class="font-normal text-gray-400"></span></p>
                               </div>
                            </div>
                        </details>
                        <details class="bg-gray-900/50 rounded-lg p-3">
                            <summary class="font-bold text-lg text-white cursor-pointer">المخزن</summary>
                            <ul id="char-sheet-inventory" class="list-disc pr-5 mt-2 text-gray-400 text-sm space-y-1"></ul>
                        </details>
                        <details class="bg-gray-900/50 rounded-lg p-3">
                            <summary class="font-bold text-lg text-white cursor-pointer">المهارات</summary>
                            <ul id="char-sheet-skills" class="list-disc pr-5 mt-2 text-gray-400 text-sm space-y-1"></ul>
                        </details>
                         <details class="bg-gray-900/50 rounded-lg p-3">
                            <summary class="font-bold text-lg text-white cursor-pointer">العلاقات</summary>
                            <ul id="char-sheet-relationships" class="list-disc pr-5 mt-2 text-gray-400 text-sm space-y-1"></ul>
                        </details>
                    </div>
                </div>

                <!-- Center Panel: Narrative & Input -->
                <div class="col-span-12 lg:col-span-6 h-full flex flex-col glass-bg rounded-2xl overflow-hidden">
                    <div id="narrative-log" class="flex-grow p-6 overflow-y-auto">
                        <!-- Narrative paragraphs will be added here -->
                    </div>
                    <div id="loading-indicator" class="hidden p-4 text-center">
                        <div role="status" class="flex items-center justify-center space-x-2 rtl:space-x-reverse">
                            <svg class="w-8 h-8 text-gray-400 animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0492C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5424 39.6781 93.9676 39.0409Z" fill="#6366f1"/></svg>
                            <span class="text-indigo-300">الذكاء الاصطناعي يفكر...</span>
                        </div>
                    </div>
                    <div class="p-4 border-t border-gray-700">
                        <div class="relative">
                           <textarea id="user-input" rows="2" class="w-full bg-gray-800 border border-gray-600 rounded-lg p-3 pr-12 focus:ring-2 focus:ring-indigo-500 focus:outline-none resize-none" placeholder="ماذا ستفعل شخصيتك الآن؟"></textarea>
                           <button id="send-action-btn" class="absolute top-1/2 -translate-y-1/2 left-3 p-2 rounded-full bg-indigo-600 hover:bg-indigo-500 text-white">
                               <i data-lucide="send-horizontal"></i>
                           </button>
                        </div>
                    </div>
                </div>

                <!-- Right Sidebar: World View -->
                <div id="sidebar-right" class="col-span-12 lg:col-span-3 h-full glass-bg rounded-2xl p-4 overflow-y-auto">
                    <h2 class="text-2xl font-bold cinzel text-white text-center mb-4">منظور العالم</h2>
                    <div class="space-y-4">
                        <div class="bg-gray-900/50 rounded-lg p-3 text-center">
                            <p id="world-time" class="text-lg font-bold text-white"></p>
                            <p id="world-weather" class="text-sm text-gray-400"></p>
                        </div>
                        <div class="bg-gray-900/50 rounded-lg p-3">
                             <p class="text-sm font-bold">الخط الزمني الحالي:</p>
                             <p id="world-timeline" class="text-indigo-300"></p>
                        </div>
                         <button id="events-btn" class="w-full text-left bg-gray-900/50 rounded-lg p-3 hover:bg-gray-800 transition-colors">
                            <span class="font-bold text-lg text-white">الأحداث الجارية</span>
                         </button>
                         <button id="protagonist-btn" class="w-full text-left bg-gray-900/50 rounded-lg p-3 hover:bg-gray-800 transition-colors">
                            <span class="font-bold text-lg text-white">حالة البطل الأصلي</span>
                         </button>
                    </div>
                </div>

            </div>
        </section>

    </div>
    
    <!-- ======================================================= -->
    <!--                       MODAL WINDOW                      -->
    <!-- ======================================================= -->
    <div id="modal" class="modal invisible opacity-0 fixed inset-0 bg-black/60 flex items-center justify-center p-4 z-50">
      <div id="modal-content" class="glass-bg rounded-2xl p-6 w-full max-w-2xl transform scale-95 transition-transform duration-300">
        <div class="flex justify-between items-center border-b border-gray-700 pb-3 mb-4">
          <h3 id="modal-title" class="text-2xl font-bold cinzel text-white"></h3>
          <button id="modal-close-btn" class="text-gray-400 hover:text-white"><i data-lucide="x-circle"></i></button>
        </div>
        <div id="modal-body" class="text-gray-300 max-h-[70vh] overflow-y-auto">
        </div>
      </div>
    </div>


    <script type="module">
        // This is a self-contained prototype.
        // It uses Gemini for AI and simulates a full application flow.
        
        const app = {
            state: {
                currentPage: 'world-selection',
                selectedWorld: null,
                character: {},
                worldState: {},
                storyLog: [],
                isLoading: false,
            },

            // ================== INITIALIZATION ==================
            init() {
                this.setupEventListeners();
                this.renderWorldCards();
            },

            refreshIcons() {
                if(typeof lucide !== 'undefined') {
                    try {
                        lucide.createIcons();
                    } catch (e) {
                        console.error("Error creating lucide icons:", e);
                    }
                }
            },

            setupEventListeners() {
                document.getElementById('send-action-btn').addEventListener('click', () => this.handleUserAction());
                document.getElementById('user-input').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        this.handleUserAction();
                    }
                });
                document.getElementById('modal-close-btn').addEventListener('click', () => this.hideModal());
                document.getElementById('generate-appearance-btn').addEventListener('click', () => this.generateRandomAppearance());
                
                document.getElementById('events-btn').addEventListener('click', () => this.showWorldInfo('events'));
                document.getElementById('protagonist-btn').addEventListener('click', () => this.showWorldInfo('protagonist'));
            },

            // ================== PAGE NAVIGATION ==================
            navigateTo(pageId) {
                document.querySelectorAll('section').forEach(page => page.classList.add('hidden'));
                document.getElementById(pageId).classList.remove('hidden');
                this.state.currentPage = pageId;
            },

            // ================== WORLD SELECTION ==================
            worlds: [
                { id: 'naruto', name: 'Naruto', difficulty: 'Hard', video: 'https://motionbgs.com/media/5535/itachi.960x540.mp4' },
                { id: 'tokyo_ghoul', name: 'Tokyo Ghoul', difficulty: 'Brutal', video: 'https://motionbgs.com/media/7861/kaneki-abyss.960x540.mp4' },
                { id: 'one_piece', name: 'One Piece', difficulty: 'Medium', video: 'https://motionbgs.com/media/1412/luffys-mighty-gear-5.960x540.mp4' },
                { id: 'solo_leveling', name: 'Solo Leveling', difficulty: 'Lethal', video: 'https://motionbgs.com/media/7683/arise-sung-jinwoo.960x540.mp4' },
                { id: 'samurai_world', name: 'Samurai World', difficulty: 'Hard', video: 'https://motionbgs.com/media/7203/wandering-swordsman.960x540.mp4' },
            ],

            renderWorldCards() {
                const list = document.getElementById('world-list');
                const loading = document.getElementById('worlds-loading');
                
                if (!list || !loading) {
                    console.error("World list or loading indicator not found in the DOM.");
                    return;
                }

                let cardsHTML = this.worlds.map(world => `
                    <div class="relative rounded-2xl overflow-hidden shadow-2xl cursor-pointer aspect-video card-bg" onclick="app.selectWorld('${world.id}')">
                        <video autoplay loop muted playsinline class="absolute top-0 left-0 w-full h-full object-cover -z-10">
                            <source src="${world.video}" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <div class="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                        <div class="absolute bottom-0 p-4 w-full text-left">
                            <h3 class="text-2xl font-bold text-white cinzel">${world.name}</h3>
                            <p class="text-sm text-gray-300">Difficulty: ${world.difficulty}</p>
                        </div>
                    </div>
                `).join('');

                // Add the custom world card
                cardsHTML += `
                    <div class="relative rounded-2xl overflow-hidden shadow-2xl cursor-pointer aspect-video card-bg flex items-center justify-center bg-gray-800/80 border-2 border-dashed border-gray-600" onclick="app.promptCustomWorld()">
                        <div class="text-center p-4">
                            <i data-lucide="plus-circle" class="w-16 h-16 text-gray-500 mx-auto"></i>
                            <h3 class="text-2xl font-bold text-white cinzel mt-2">Custom World</h3>
                            <p class="text-sm text-gray-400">Enter your own</p>
                        </div>
                    </div>
                `;

                list.innerHTML = cardsHTML;
                
                loading.style.display = 'none';
                list.style.display = 'grid';
                
                this.refreshIcons();
            },
            
            promptCustomWorld() {
                const modalTitle = 'Enter Your Desired World';
                const modalBody = `
                    <div dir="ltr">
                        <p class="mb-4">Enter the name of any anime, novel, or movie world you wish to experience.</p>
                        <input type="text" id="custom-world-input" placeholder="e.g., Bleach, Hunter x Hunter, ..." class="bg-gray-900 border border-gray-700 rounded-lg p-3 w-full focus:ring-2 focus:ring-indigo-500 focus:outline-none text-white">
                        <button id="confirm-custom-world-btn" class="btn-primary mt-4 w-full">Confirm & Select</button>
                    </div>
                `;
                this.showModal(modalTitle, modalBody);
                
                setTimeout(() => {
                    document.getElementById('confirm-custom-world-btn').onclick = () => this.selectCustomWorld();
                }, 0);
            },

            selectCustomWorld() {
                const customNameInput = document.getElementById('custom-world-input');
                if (!customNameInput) return;
                const customName = customNameInput.value.trim();
                if (!customName) return;

                const customWorld = {
                    id: customName.toLowerCase().replace(/\s+/g, '_'),
                    name: customName,
                    difficulty: 'Unknown',
                    video: '' // No video for custom worlds
                };
                
                this.hideModal();
                this.selectWorld(customWorld, true);
            },
            
            selectWorld(worldIdOrObject, isCustom = false) {
                if (isCustom) {
                    this.state.selectedWorld = worldIdOrObject;
                } else {
                    this.state.selectedWorld = this.worlds.find(w => w.id === worldIdOrObject);
                }
                document.getElementById('creation-title').textContent = `صناعة الشخصية: عالم ${this.state.selectedWorld.name}`;
                this.navigateTo('page-character-creation');
            },

            // ================== CHARACTER CREATION ==================
            nextStep(step) {
                document.querySelectorAll('[id^="character-form-step-"]').forEach(el => el.classList.add('hidden'));
                document.getElementById(`character-form-step-${step}`).classList.remove('hidden');
            },

            async generateRandomAppearance() {
                const genBtn = document.getElementById('generate-appearance-btn');
                genBtn.disabled = true;
                genBtn.textContent = '...جاري التوليد';
                
                const prompt = `Generate a brief, evocative character appearance description for a new character in the world of ${this.state.selectedWorld.name}. The gender is ${document.getElementById('char-gender').value}. The description should be in Arabic.`;
                
                try {
                    const appearance = await this.callGemini(prompt, false);
                    document.getElementById('char-appearance').value = appearance;
                } catch (error) {
                    console.error("Appearance generation failed:", error);
                    document.getElementById('char-appearance').value = "فشل توليد المظهر. الرجاء المحاولة مرة أخرى أو الكتابة يدويًا.";
                } finally {
                    genBtn.disabled = false;
                    genBtn.textContent = 'توليد وصف عشوائي';
                }
            },

            startSimulation() {
                this.state.character = {
                    name: document.getElementById('char-name').value,
                    gender: document.getElementById('char-gender').value,
                    age: document.getElementById('char-age').value,
                    timeline: document.getElementById('char-timeline').value,
                    location: document.getElementById('char-location').value,
                    appearance: document.getElementById('char-appearance').value,
                    rank: 'مبتدئ',
                    status: 'طبيعي',
                    health: 'صحة كاملة',
                    energy: 100,
                    inventory: ['ملابس أساسية', 'مبلغ بسيط من المال'],
                    skills: ['مهارة أساسية 1'],
                    relationships: {}
                };

                this.state.worldState = {
                    name: this.state.selectedWorld.name,
                    time: 'صباحًا',
                    weather: 'صافي',
                    timeline: this.state.character.timeline,
                };
                
                const initialPrompt = this.constructInitialPrompt();
                this.state.storyLog.push({ role: 'user', parts: [{ text: initialPrompt }] });
                
                this.renderCharacterSheet();
                this.renderWorldView();
                this.navigateTo('page-simulation');
                this.submitPromptToAI(null, true); // Send the initial prompt
            },

            // ================== SIMULATION CORE ==================
            handleUserAction() {
                const userInput = document.getElementById('user-input').value.trim();
                if (!userInput || this.state.isLoading) return;

                this.submitPromptToAI(userInput, false);
                document.getElementById('user-input').value = '';
            },

            async submitPromptToAI(userInput, isInitial = false) {
                this.setLoading(true);

                if (userInput) {
                    this.addNarrativeBlock(userInput, 'user');
                    this.state.storyLog.push({ role: 'user', parts: [{ text: `ماذا أفعل: "${userInput}"` }] });
                }

                const systemPrompt = this.constructSystemPrompt();
                const history = [systemPrompt, ...this.state.storyLog.slice(-10)]; // Use system + last 10 messages for context

                try {
                    const responseJson = await this.callGemini(history, true);
                    this.processAIResponse(responseJson);
                    // The AI response is added to the log inside processAIResponse
                } catch (error) {
                    console.error("AI call failed:", error);
                    this.addNarrativeBlock("حدث خطأ أثناء الاتصال بالذكاء الاصطناعي. الرجاء المحاولة مرة أخرى.", 'system');
                } finally {
                    this.setLoading(false);
                }
            },
            
            processAIResponse(response) {
                if (!response || !response.narrative || !response.characterUpdate || !response.worldUpdate) {
                     this.addNarrativeBlock("استقبلت استجابة غير متوقعة من الذكاء الاصطناعي. يرجى محاولة مرة أخرى.", 'system');
                     console.error("Invalid AI response structure:", response);
                     return;
                }

                this.addNarrativeBlock(response.narrative, 'ai');
                if (response.soundEffect) {
                    this.addNarrativeBlock(response.soundEffect, 'sfx');
                }

                // Update state
                this.state.character = { ...this.state.character, ...response.characterUpdate };
                this.state.worldState = { ...this.state.worldState, ...response.worldUpdate };
                
                // Process complex updates like inventory
                if(response.characterUpdate.inventory_add) {
                    this.state.character.inventory.push(...response.characterUpdate.inventory_add);
                }
                if(response.characterUpdate.inventory_remove) {
                    this.state.character.inventory = this.state.character.inventory.filter(item => !response.characterUpdate.inventory_remove.includes(item));
                }
                if(response.characterUpdate.relationships_update){
                    this.state.character.relationships = {...this.state.character.relationships, ...response.characterUpdate.relationships_update};
                }


                // Add AI's full turn to log for context
                const fullAiTurn = `SITUATION UPDATE:\n${JSON.stringify(response, null, 2)}`;
                this.state.storyLog.push({ role: 'model', parts: [{ text: fullAiTurn }] });

                this.renderCharacterSheet();
                this.renderWorldView();

                if (response.isCombatEncounter) {
                    this.showModal('بداية القتال!', response.enemyInfo, false);
                }
                
                if (response.lowEnergyWarning) {
                    this.showModal('تحذير!', response.lowEnergyWarning, false);
                }
            },
            
            constructSystemPrompt() {
                // This is the master prompt that guides the AI's behavior.
                return {
                    role: "user",
                    parts: [{
                        text: `You are an expert, unfiltered, and cinematic storyteller AI for an interactive life simulation game.
                        The user is playing in the world of: "${this.state.selectedWorld.name}".
                        The user's character is: ${JSON.stringify(this.state.character)}.
                        The current world state is: ${JSON.stringify(this.state.worldState)}.

                        YOUR CORE RULES:
                        1.  **Unfiltered Realism:** Generate a harsh, realistic, and mature narrative true to the source material. Do not censor violence, complex themes, or adult situations if they fit the world's canon.
                        2.  **Canon Consistency:** Strictly adhere to the rules, power systems, characters, and lore of "${this.state.selectedWorld.name}". Do not introduce anything that doesn't belong.
                        3.  **Cinematic Narration:** Write in the third person. Describe scenes, actions, emotions, and sensory details (sights, sounds). Use textual sound effects (e.g., "BOOM!", "Clang!") where appropriate.
                        4.  **Logical Consequences:** Every user action must have a realistic and logical outcome. There are no plot shields.
                        5.  **Autonomous NPCs:** NPCs have their own personalities and goals. They react based on the user's appearance, gender, reputation, and actions. They can be helpful, hostile, or indifferent.
                        6.  **Permadeath:** If the character's health drops to zero or they are in an unwinnable situation, describe their death cinematically and end the story.

                        YOUR RESPONSE MUST BE A VALID JSON OBJECT. Do not write any text outside the JSON structure.
                        The JSON object must have the following structure:
                        {
                          "narrative": "The cinematic story text describing what happens next. THIS IS REQUIRED.",
                          "soundEffect": "An optional sound effect string like 'CRASH!' or 'WHOOSH!'.",
                          "characterUpdate": {
                            "status": "Updated character status (e.g., 'Injured', 'Exhausted').",
                            "health": "Detailed health description (e.g., 'Minor cuts', 'Broken arm').",
                            "energy": "The new energy level as a number from 0-100.",
                            "rank": "Updated rank if changed.",
                            "inventory_add": ["New items acquired as an array of strings."],
                            "inventory_remove": ["Items lost or used as an array of strings."],
                            "relationships_update": {"NPC Name": "New relationship status."}
                          },
                          "worldUpdate": {
                            "time": "Updated time of day (e.g., 'Afternoon', 'Midnight').",
                            "weather": "Updated weather (e.g., 'Raining', 'Snowing')."
                          },
                          "lowEnergyWarning": "If the user tries an action with insufficient energy, provide a warning message here.",
                          "isCombatEncounter": "true or false. If true, include enemyInfo.",
                          "enemyInfo": "A formatted string with enemy details if isCombatEncounter is true."
                        }
                        Analyze the user's action and the current state, then generate the next part of the story according to these rules and in the specified JSON format.`
                    }]
                };
            },

            constructInitialPrompt() {
                return `This is the beginning of my story.
                My character details: ${JSON.stringify(this.state.character)}.
                My starting world state: ${JSON.stringify(this.state.worldState)}.
                Generate the very first scene of my adventure. Describe my character's immediate surroundings and the initial situation based on my chosen starting point. Set the scene cinematically.
                `;
            },
            
            // ================== AI API CALL ==================
            async callGemini(promptOrHistory, expectJson) {
                const apiKey = ""; // Canvas will provide this.
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const payload = {
                    contents: Array.isArray(promptOrHistory) ? promptOrHistory : [{ role: "user", parts: [{ text: promptOrHistory }] }],
                    generationConfig: expectJson ? { responseMimeType: "application/json" } : {}
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(`API call failed with status: ${response.status}`);
                }
                
                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts.length > 0) {
                     return expectJson ? JSON.parse(result.candidates[0].content.parts[0].text) : result.candidates[0].content.parts[0].text;
                } else if(result.promptFeedback && result.promptFeedback.blockReason){
                    console.error("Prompt blocked:", result.promptFeedback);
                    throw new Error(`Prompt was blocked. Reason: ${result.promptFeedback.blockReason}`);
                }
                else {
                    throw new Error("Unexpected response structure from AI.");
                }
            },


            // ================== UI RENDERING ==================
            setLoading(isLoading) {
                this.state.isLoading = isLoading;
                document.getElementById('loading-indicator').classList.toggle('hidden', !isLoading);
                document.getElementById('send-action-btn').disabled = isLoading;
                document.getElementById('user-input').disabled = isLoading;
            },

            addNarrativeBlock(text, type) {
                const log = document.getElementById('narrative-log');
                const p = document.createElement('p');
                if (type === 'user') {
                    p.className = 'text-indigo-300 italic text-right my-4 border-r-2 border-indigo-400 pr-2';
                    p.textContent = `> ${text}`;
                } else if (type === 'ai') {
                    p.className = 'text-gray-300 my-4 text-justify leading-relaxed';
                    p.textContent = text;
                } else if (type === 'sfx') {
                    p.className = 'text-yellow-400 font-bold text-center text-xl my-4 cinzel tracking-widest';
                    p.textContent = text;
                } else { // system
                    p.className = 'text-red-400 text-center my-4 p-2 bg-red-900/50 rounded';
                    p.textContent = text;
                }
                log.appendChild(p);
                log.scrollTop = log.scrollHeight;
            },
            
            renderCharacterSheet() {
                const c = this.state.character;
                if(c.name) document.getElementById('char-sheet-avatar').src = `https://placehold.co/150x150/1f2937/d1d5db?text=${c.name.charAt(0)}`;
                document.getElementById('char-sheet-name').textContent = c.name;
                document.getElementById('char-sheet-age-status').textContent = `العمر: ${c.age} | الحالة: ${c.status}`;
                document.getElementById('char-sheet-rank').textContent = c.rank;
                document.getElementById('char-sheet-appearance').textContent = c.appearance;
                if(this.state.selectedWorld) document.getElementById('char-sheet-energy-label').textContent = this.state.selectedWorld.id === 'naruto' ? 'تشاكرا' : 'طاقة';
                document.getElementById('char-sheet-energy-bar').style.width = `${c.energy}%`;
                document.getElementById('char-sheet-health').textContent = c.health;
                document.getElementById('char-sheet-inventory').innerHTML = c.inventory.map(item => `<li>${item}</li>`).join('');
                document.getElementById('char-sheet-skills').innerHTML = c.skills.map(skill => `<li>${skill}</li>`).join('');
                document.getElementById('char-sheet-relationships').innerHTML = Object.entries(c.relationships).map(([name, status]) => `<li><strong>${name}:</strong> ${status}</li>`).join('');
                this.refreshIcons();
            },

            renderWorldView() {
                const w = this.state.worldState;
                document.getElementById('world-time').textContent = w.time;
                document.getElementById('world-weather').textContent = w.weather;
                document.getElementById('world-timeline').textContent = w.timeline;
                this.refreshIcons();
            },
            
            // ================== MODAL & POPUPS ==================
            showModal(title, body, isHtml = true) {
                document.getElementById('modal-title').textContent = title;
                if(isHtml){
                     document.getElementById('modal-body').innerHTML = body;
                } else {
                     document.getElementById('modal-body').innerHTML = `<p>${body.replace(/\n/g, '<br>')}</p>`;
                }
                const modal = document.getElementById('modal');
                modal.classList.remove('invisible', 'opacity-0');
                document.getElementById('modal-content').classList.remove('scale-95');
                this.refreshIcons();
            },

            hideModal() {
                 const modal = document.getElementById('modal');
                 modal.classList.add('invisible', 'opacity-0');
                 document.getElementById('modal-content').classList.add('scale-95');
            },
            
            async showWorldInfo(type) {
                const title = type === 'events' ? 'الأحداث الجارية في العالم' : `حالة البطل الأصلي`;
                this.showModal(title, '...جاري جلب المعلومات من الذكاء الاصطناعي', false);
                
                const prompt = type === 'events'
                    ? `In the world of ${this.state.selectedWorld.name}, during the timeline of "${this.state.worldState.timeline}", what are the major world events happening right now, away from the player character? Provide a brief summary in Arabic.`
                    : `In the world of ${this.state.selectedWorld.name}, during the timeline of "${this.state.worldState.timeline}", what is the original protagonist of the story doing right now? Provide a brief summary in Arabic.`;
                
                try {
                    const info = await this.callGemini(prompt, false);
                    // Check if a character name exists to improve the title
                    const charName = this.state.character.name || "البطل الأصلي";
                    const finalTitle = type === 'events' ? 'الأحداث الجارية في العالم' : `حالة ${charName}`;
                    this.showModal(finalTitle, info, false);
                } catch (error) {
                    console.error("World info fetch failed:", error);
                    this.showModal(title, "فشل في جلب المعلومات.", false);
                }
            }

        };
        
        // Final, robust initialization logic.
        // This ensures the DOM is fully loaded before the app tries to manipulate it.
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                window.app = app;
                app.init();
            });
        } else {
            // DOMContentLoaded has already fired
            window.app = app;
            app.init();
        }

    </script>
</body>
</html>
